#!/usr/bin/env python3

import json
import matplotlib.pyplot as plt
import numpy as np
import sys


import recov.censi
import recov.util

from lieroy import se3

def filter_outliers(se3_results):
    distances = np.empty(len(se3_results))
    for i, t in enumerate(se3_results):
        print(t)
        lie = se3.log(t)
        print(np.linalg.norm(lie))
        distances[i] = np.linalg.norm(lie)


    mask = distances < np.percentile(distances, 90)

    return se3_results[mask]



def cli():
    dataset = json.load(sys.stdin)

    noise_levels = []
    samples = []
    covariances = np.empty((len(dataset), 6, 6))
    censi = np.empty((len(dataset), 6, 6))
    censi_traces = np.empty(len(dataset))
    censi_norms = np.empty(len(dataset))
    traces = np.empty(len(dataset))
    norms = np.empty(len(dataset))
    for i, pair in enumerate(dataset):
        noise_levels.append(pair['noise_level'])

        sample = filter_outliers(np.array(pair['results']))
        samples.append(sample)

        _, covariances[i] = se3.gaussian_from_sample(sample)
        traces[i] = np.trace(covariances[i])
        norms[i] = np.linalg.norm(covariances[i])
        censi[i] = np.array(pair['censi'])
        censi_traces[i] = np.trace(censi[i])
        censi_norms[i] = np.linalg.norm(censi[i])


    noise_levels = np.array(noise_levels)
    traces = np.array(traces)
    censi_traces = np.array(censi_traces)

    recov.util.matplotlib_paper_config()

    fig, ax = plt.subplots()
    fig.set_size_inches((3.412, 1.9))
    fig.set_dpi(72)


    ax.plot(100. * noise_levels, traces, color='black', label='Reference Covariance', linewidth=0.8)
    ax.plot(100. * noise_levels, censi_traces, color='black', linestyle='dashed', label='Censi Cov. Estimate', linewidth=0.8)

    ax.ticklabel_format(style='sci', ax='y', scilimits=(0,0))

    ax.set_xlim(-0.1, 100.0 * np.max(noise_levels) + 0.1)

    # for side in ['top', 'bottom', 'left', 'right']:
    #     ax.spines[side].set_visible(False)


    ax.legend()
    # ax.set_title('Trace of covariance matrix against sensor noise')
    ax.set_xlabel('Sensor noise standard deviation (cm)')
    ax.set_ylabel('Trace of covariance matrix')
    fig.subplots_adjust(bottom=0.2)

    # plt.tight_layout(pad=1.00, w_pad=0.5, h_pad=1.1)
    plt.savefig('fig.pdf')
    plt.show()


if __name__ == '__main__':
    cli()
